apply plugin: 'spring-boot'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/gradle/integTest.gradle"

mainClassName = 'io.spring.site.indexer.configuration.IndexerConfiguration'

springBoot {
    backupSource = false
    mainClass = mainClassName
}

dependencies {
    compile project(':sagan-common')

    compile "org.springframework.boot:spring-boot-starter-web:${vSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${vSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-security:${vSpringBoot}"

    // for use in CrawlerService
    compile "org.apache.httpcomponents:httpclient:${vHttpClient}"
    compile('com.soulgalore:crawler:1.5.1') {
        exclude(module: 'guice')
        exclude(module: 'commons-logging')
    }

    // for use in mocking http interactions
    testCompile "org.springframework:spring-test:${vSpringCore}"

    testCompile project(':sagan-common').sourceSets.util.output
}


task copyStaticTemplates(type: Copy, dependsOn: project(':sagan-site').processResources) {
    description = "Copies static html templates from :sagan-site in order to index them"

    from project(':sagan-site').sourceSets.main.output.resourcesDir
    into sourceSets.main.output.resourcesDir
    include "templates/pages/**/*"
}
processResources.dependsOn copyStaticTemplates

gradle.projectsEvaluated {
    test.mustRunAfter project(':sagan-site').test
    tasks['it'].mustRunAfter project(':sagan-site').tasks['it']
    check.mustRunAfter project(':sagan-site').check
    jar.mustRunAfter project(':sagan-site').jar
    //build.mustRunAfter project(':sagan-site').build
    //assemble.mustRunAfter project(':sagan-site').assemble
}

def checkTasks = []
gradle.rootProject.allprojects { project ->
    checkTasks.addAll(project.tasks.findAll { it.name == 'build' })
}

tasks.addRule('Pattern: deploy<Space>: Deploys the project to a Cloud Foundry space.') { taskName ->
    if (taskName.startsWith('deploy')) {
        def space = taskName - 'deploy'
        def cfPath = System.getProperty("cf.path")?:''
        def cfUser = System.getProperty("cf.user")?:''
        def cfPass = System.getProperty("cf.path")?:''
        if (space.length() == 0) throw new GradleException('Usage: deploy<Space>')
        project.task([type: Exec, dependsOn: build], taskName) {
            commandLine './scripts/deploy-single-app.sh', space.toLowerCase(), cfPath, cfUser, cfPass

            // ensure the indexer is always deployed after the site, because if the
            // site fails to deploy, we don't want the indexer to deploy at all
            mustRunAfter project(':sagan-site').tasks[taskName]
            mustRunAfter checkTasks
        }
    }
}
