/**
 * Populate git commit and branch metadata for inspection at http://spring.io/info.
 * See http://projects.spring.io/spring-boot/docs/spring-boot-actuator/docs/Features.html ("Info Endpoint")
 */
task writeGitPropertiesFile(dependsOn: [ rootProject.gitMetadata, processResources ]) {
    ext.outputFile = file("${sourceSets.main.output.resourcesDir}/git.properties")

    doLast() {
        new Properties(
                'git.branch' : rootProject.gitMetadata.branch,
                'git.commit.id' : rootProject.gitMetadata.commitId,
                'git.commit.time' : rootProject.gitMetadata.commitTime
        ).store(new BufferedWriter(new FileWriter(outputFile)) {
            public void write(String s, int off, int len) throws IOException {
                if (s.startsWith("#")) {
                    // suppress printing a timestamp in the properties file so Gradle can evaluate whether the
                    // file's actual contents have changed and allow for skipping the `jar` task if they have not
                    return
                }
                super.write(s, off, len)
            }
        }, null)
    }
}
jar.inputs.file writeGitPropertiesFile.outputFile
jar.dependsOn writeGitPropertiesFile
