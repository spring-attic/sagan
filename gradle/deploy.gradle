def checkTasks = []
gradle.rootProject.allprojects { project ->
    checkTasks.addAll(project.tasks.findAll { it.name == 'build' })
}

tasks.addRule('Pattern: deploy: Deploys the project to a Cloud Foundry space.') { String taskName ->
    if (taskName.equals('deploy')) {
        project.task([dependsOn: 'build'], taskName) {
            // ensure the indexer is always deployed after the site, because if the
            // site fails to deploy, we don't want the indexer to deploy at all
            if (project.name == 'sagan-indexer') {
                mustRunAfter project(':sagan-site').tasks[taskName]
            }
            mustRunAfter checkTasks

            if (project.name == 'sagan-site') {
                finalizedBy 'deployApp'
            } else {
                finalizedBy 'pushApp'
            }
        }
    }
}

task([dependsOn: ['cf-deploy', 'cf-swap-deployed']], "deployApp") {
}

task([dependsOn: 'cf-push'], "pushApp") {
}

def saganEnvScript = file("${System.getProperty("user.home")}/.gradle/sagan-env.gradle")
if (saganEnvScript.exists()) {
    println "Applying environment settings from ${saganEnvScript.path}"
    apply from: saganEnvScript
}

apply plugin: 'cloudfoundry'

cloudfoundry {
    target = "https://api.run.pivotal.io"
    organization = "spring.io"

    file = file("${jar.archivePath}")
    host = "$application"
    domain = 'cfapps.io'
    memory = 2048
    instances = 4
    healthCheckTimeout = 180

    versions = ['-blue', '-green']
}

if (project.name == 'sagan-site') {
    cloudfoundry {
        application = 'sagan' // instead of 'sagan-site'
    }
}

// These deployment properties can be set on the command line with "-P" options, in "gradle.properties",
// or in "~/.gradle/sagan-env.gradle".

if (project.hasProperty('adminPassword') && project.hasProperty('elasticsearchEndpoint') &&
    project.hasProperty('githubClientId') && project.hasProperty('githubClientSecret') &&
    project.hasProperty('webhookAccessToken')) {

    cloudfoundry {
        env << [
            ADMIN_PASSWORD: adminPassword,
            ELASTICSEARCH_ENDPOINT: elasticsearchEndpoint,
        ]
    }

    if (project.name == 'sagan-site') {
        cloudfoundry {
            env << [
                GITHUB_CLIENT_ID: githubClientId,
                GITHUB_CLIENT_SECRET: githubClientSecret,
                WEBHOOK_ACCESS_TOKEN: webhookAccessToken
            ]
        }
    }
}

// Routes can be specified by combining the 'host'/'hosts' field with the 'domain' field, or by the 'uri'/'uris' field.
// Values for 'host'/'hosts' are modified on cf-deploy to add '-blue' or '-green' as appropriate, and are applied on
// cf-push and cf-deploy. Values for 'uri'/'uris' are never modified with '-blue' or '-green', and are only applied by
// cf-push and cf-swap-deployed. Using both forms of specifying routes gives control over which routes are decorated and
// which routes are undecorated.

if (project.hasProperty('staging')) {
    cloudfoundry {
        space = 'staging'
        host = "$application-${space}"

        env << [
            SPRING_PROFILES_ACTIVE: "${space}",
            NEW_RELIC_APP_NAME: "sagan-blue;sagan",
            ELASTICSEARCH_INDEX: "sagan-${space}"
        ]

        services {
            'sagan-db' {
                label = 'elephantsql'
                provider = 'elephantsql'
                plan = 'hippo'
                version = 'n/a'
            }
            'newrelic' {
                label = 'newrelic'
                provider = 'newrelic'
                plan = 'standard'
                version = 'n/a'
            }
        }
    }

    if (project.name == 'sagan-site') {
        cloudfoundry {
            uris = [ "${space}.spring.io" ]
        }
    }
}

if (project.hasProperty('prod')) {
    cloudfoundry {
        space = 'production'
        host = "$application-${space}"

        env << [
            SPRING_PROFILES_ACTIVE: "${space}",
            NEW_RELIC_APP_NAME: "sagan-blue;sagan",
            ELASTICSEARCH_INDEX: "sagan-${space}"
        ]

        services {
            'sagan-db' {
                label = 'elephantsql'
                provider = 'elephantsql'
                plan = 'panda'
                version = 'n/a'
            }
            'newrelic' {
                label = 'newrelic'
                provider = 'newrelic'
                plan = 'standard'
                version = 'n/a'
            }
        }
    }

    if (project.name == 'sagan-site') {
        cloudfoundry {
            uris = [ "spring.io", "www.spring.io" ]
        }
    }
}
