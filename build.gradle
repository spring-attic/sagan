buildscript {
    ext.springRepo = 'http://repo.spring.io/libs-release'
    repositories {
        mavenLocal()
        maven { url springRepo }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE"
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.3' // see deploy.gradle
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.14.0'
}

def vJavaLang = '1.8'
def javaProjects = [ project(':sagan-site'), project(':sagan-indexer'), project(':sagan-common') ]
def bootProjects = javaProjects - project(':sagan-common')
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '4.1'

configure(allprojects) {
    apply plugin: 'eclipse'
    version = "1.0.0.BUILD-SNAPSHOT"
}

configure(javaProjects) {

    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        mavenLocal()
        maven { url springRepo }
    }

    afterEvaluate {
        dependencyManagement {
            imports {
                mavenBom('io.spring.platform:platform-bom:Brussels-SR12') {
                    bomProperties([
                            'elasticsearch.version': '1.7.1' // see io.searchbox:jest
                    ])
                }
                mavenBom("org.springframework.cloud:spring-cloud-dependencies:Edgware.SR4")
            }
        }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

configure(bootProjects) {
    apply plugin: 'org.springframework.boot'
    apply from: "$gradleDir/integTest.gradle"

    springBoot.backupSource = false
}

