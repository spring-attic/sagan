def vJavaLang = '1.8'
def javaProjects = [ project(':sagan-site'), project(':sagan-indexer'), project(':sagan-common') ]
def bootProjects = javaProjects - project(':sagan-common')
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '2.4'

buildscript {
    ext.springRepo = 'http://repo.spring.io/libs-release'

    repositories {
        maven { url springRepo }
    }

    dependencies {
		classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.3' // see deploy.gradle
    }
}

configure(allprojects) {
    apply plugin: 'eclipse'
}

configure(rootProject) {
    apply from: 'gradle/gitMetadata.gradle'
}

configure(javaProjects) {
    apply plugin: 'java'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        maven { url springRepo }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        compile 'org.projectlombok:lombok'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

configure(bootProjects) {
	apply plugin: "io.spring.dependency-management"
    apply plugin: 'spring-boot'
    apply from: "$gradleDir/integTest.gradle"
    apply from: "$gradleDir/deploy.gradle"
    apply from: "$gradleDir/writeGitPropertiesFile.gradle"

    springBoot.backupSource = false
    bootRun.dependsOn writeGitPropertiesFile

	dependencyManagement {
		imports {
			mavenBom 'io.spring.platform:platform-bom:1.1.3.RELEASE'
		}
	}
}

